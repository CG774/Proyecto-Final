---- PROCEDIMIENTOS ALMACENADOS---

----AGREGAR UN PRODUCTO

DELIMITER $$

CREATE PROCEDURE `AgregarProducto`(
    IN nombreProducto VARCHAR(100)
)
BEGIN
    -- Insertar el producto en la tabla 'productos'
    INSERT INTO productos(nombre_producto) VALUES (nombreProducto);
END$$

DELIMITER ;


---ACTUALIZAR UN PRODUCTO
DELIMITER $$

CREATE PROCEDURE `ActualizarProductoPorID`(
    IN _id_producto INT,
    IN _nombre_producto VARCHAR(100)
)
BEGIN
    -- Actualizar el nombre del producto en la tabla 'productos'
    UPDATE productos
    SET nombre_producto = _nombre_producto
    WHERE id_producto = _id_producto;
END$$

DELIMITER ;
--- TRIGER ACTUALIZAR EN INVENTARIO
DELIMITER $$

CREATE TRIGGER `ActualizarDetalleInventarioDespuesDeProducto`
AFTER UPDATE ON productos
FOR EACH ROW
BEGIN
    IF OLD.nombre_producto != NEW.nombre_producto THEN
        -- Actualizar el nombre del producto en 'detalle_inventario'
        UPDATE detalle_inventario
        SET nombre_producto = NEW.nombre_producto
        WHERE nombre_producto = OLD.nombre_producto;
    END IF;
END$$

DELIMITER ;

--- TRIGER ELIMINAR PRODUCTO---
DELIMITER $$

CREATE TRIGGER `EliminarDetalleInventarioDespuesDeProducto`
AFTER DELETE ON productos
FOR EACH ROW
BEGIN
    -- Eliminar el registro correspondiente en 'detalle_inventario' basado en el nombre del producto eliminado
    DELETE FROM detalle_inventario
    WHERE nombre_producto = OLD.nombre_producto;
END$$

DELIMITER ;




---AGREGAR UN PROVEEDOR
DELIMITER $$

CREATE PROCEDURE AgregarProveedor(
    IN _nombre_proveedor VARCHAR(100),
    IN _telefono_proveedor VARCHAR(20),
    IN _id_producto INT
)
BEGIN
    INSERT INTO proveedores (nombre_proveedor, telefono_proveedor, id_producto) VALUES (_nombre_proveedor, _telefono_proveedor, _id_producto);
END$$

DELIMITER ;

---ACTUALIZAR PROVEEDOR POR ID
DELIMITER $$

CREATE PROCEDURE ActualizarProveedorPorId(
    IN _id_proveedor INT,
    IN _nombre_proveedor VARCHAR(100),
    IN _telefono_proveedor VARCHAR(20)
)
BEGIN
    UPDATE proveedores
    SET nombre_proveedor = _nombre_proveedor,
        telefono_proveedor = _telefono_proveedor
    WHERE id_proveedor = _id_proveedor;
END$$

DELIMITER ;

---AGREGAR registro_inventario
DELIMITER $$

CREATE PROCEDURE AgregarEntradaInventario(
    IN idProveedor INT,
    IN idProducto INT,
    IN cantidadKg DECIMAL(10,2)
)
BEGIN
    -- Insertar la entrada de inventario
    INSERT INTO entradas_inventario(id_proveedor, id_producto, cantidad_kg) 
    VALUES (idProveedor, idProducto, cantidadKg);
    
    -- Verificar si el producto ya existe en detalle_inventario
    IF EXISTS (SELECT 1 FROM detalle_inventario WHERE nombre_producto = (SELECT nombre_producto FROM productos WHERE id_producto = idProducto)) THEN
        -- Actualizar la cantidad total en detalle_inventario
        UPDATE detalle_inventario
        SET cantidad_total_kg = cantidad_total_kg + cantidadKg
        WHERE nombre_producto = (SELECT nombre_producto FROM productos WHERE id_producto = idProducto);
    ELSE
        -- Insertar un nuevo registro en detalle_inventario si el producto no existe
        INSERT INTO detalle_inventario(nombre_producto, cantidad_total_kg) 
        VALUES ((SELECT nombre_producto FROM productos WHERE id_producto = idProducto), cantidadKg);
    END IF;
END$$

DELIMITER ;

----AGREGAR UN ENVIO--
DELIMITER $$

CREATE PROCEDURE AgregarEnvio(
    IN _id_producto INT,
    IN _id_gaveta INT,
    IN _cantidad_en_kg DECIMAL(10,2),
    IN _id_envio_general INT
)
BEGIN
    INSERT INTO envios (id_producto, id_gaveta, cantidad_en_kg, id_envio_general)
    VALUES (_id_producto, _id_gaveta, _cantidad_en_kg, _id_envio_general);
END$$

DELIMITER ;

---- ACTUALIZAR ESTADO DE LAS GAVETAS DEPUES DE UN ENVIO
DELIMITER $$

CREATE TRIGGER ActualizarEstadoGavetaDespuesDeEnvio
AFTER INSERT ON envios
FOR EACH ROW
BEGIN
    UPDATE gavetas
    SET id_estado = 2
    WHERE id = NEW.id_gaveta;
END$$

DELIMITER ;

